"""–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
import tkinter as tk
from tkinter import font
import threading
import time
import urllib.parse
import requests
from typing import Dict, Any, List, Optional

from config import ConfigManager
from models import PriceMonitor, CurrencyConverter, AlertConfig, Observable
from services import BinancePriceProvider, NewsService, NotificationService
from utils import Internationalization, FormatUtils, ErrorHandler
from views import AlertHistoryWindow, ConverterWindow, ChartWindow, SettingsWindow

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
try:
    from pystray import Icon, Menu, MenuItem
    from PIL import Image, ImageDraw

    HAS_TRAY = True
except ImportError:
    HAS_TRAY = False

try:
    import matplotlib

    matplotlib.use('TkAgg')
    import matplotlib.pyplot as plt
    from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
    import mplfinance as mpf
    import pandas as pd

    HAS_MPL = True
except ImportError:
    HAS_MPL = False


class CryptoPriceApp(Observable):
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-—Ç—Ä–µ–∫–µ—Ä–∞."""

    def __init__(self, root):
        super().__init__()
        self.root = root
        self.alert_history: List[str] = []
        self.news_cache: List[str] = []

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.config_manager = ConfigManager()
        self.translations = Internationalization()
        self.converter = CurrencyConverter()
        self.notification_service = NotificationService()
        self.news_service = NewsService()
        self.price_provider = BinancePriceProvider()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ —Ü–µ–Ω –î–û —Å–æ–∑–¥–∞–Ω–∏—è UI
        self.monitor = PriceMonitor(self.config_manager.get("symbol"))
        self.monitor.add_observer(self._on_price_event)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞
        self._setup_language()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
        self._setup_ui()

        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        self._start_services()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è
        if HAS_TRAY:
            self._setup_tray()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)
        self._setup_keybindings()

    def _setup_language(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —è–∑—ã–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        language = self.config_manager.get("language", "auto")
        self.translations.set_language(language)
        self.root.title(self.translations.get_text("title"))

    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."""
        self.root.geometry("520x420")
        self.root.resizable(False, False)
        self._apply_theme()

        if self.config_manager.get("always_on_top", False):
            self.root.wm_attributes("-topmost", True)

        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI
        self._create_title()
        self._create_price_display()
        self._create_portfolio_display()
        self._create_currency_info()
        self._create_news_section()
        self._create_status_bar()
        self._create_buttons()

        self._set_icon()

    def _create_title(self):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–æ–π."""
        self.title_label = tk.Label(
            self.root, text="", font=font.Font(size=18, weight="bold"),
            bg="#1e1e1e", fg="#FFD700"
        )
        self._update_title()
        self.title_label.pack(pady=8)

    def _create_price_display(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã."""
        self.price_label = tk.Label(
            self.root, text="Loading...",
            font=font.Font(family="Consolas", size=24, weight="bold"),
            bg="#1e1e1e", fg="white"
        )
        self.price_label.pack()

        self.converted_label = tk.Label(
            self.root, text="", font=("Consolas", 14),
            bg="#1e1e1e", fg="#aaa"
        )
        self.converted_label.pack(pady=(0, 5))

    def _create_portfolio_display(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è."""
        self.portfolio_frame = tk.Frame(self.root, bg="#1e1e1e")
        self.portfolio_frame.pack(pady=5)

        self.portfolio_label = tk.Label(
            self.portfolio_frame, text="",
            font=("Consolas", 14, "bold"),
            bg="#1e1e1e", fg="#00FF00"
        )
        self.portfolio_label.pack()
        # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º _update_portfolio_display –∑–¥–µ—Å—å - –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–æ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã
        self._update_portfolio_display()

    def _create_currency_info(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª—é—Ç–∞—Ö."""
        usdt_rub = self.converter.get_usdt_rub()
        self.usdt_rub_label = tk.Label(
            self.root, text=f"USDT/RUB ‚âà ‚ÇΩ{usdt_rub:,.2f}",
            font=("Consolas", 10), bg="#1e1e1e", fg="#888"
        )
        self.usdt_rub_label.pack(pady=(2, 0))

    def _create_news_section(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π."""
        news_frame = tk.Frame(self.root, bg="#1e1e1e")
        news_frame.pack(pady=(10, 0), padx=20, fill="x")

        tk.Label(news_frame, text="üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏",
                 bg="#1e1e1e", fg="#FFD700",
                 font=("Arial", 10, "bold")).pack(anchor="w")

        self.news_label = tk.Label(news_frame, text="–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...", bg="#1e1e1e",
                                   fg="#ccc", font=("Arial", 9),
                                   justify="left", wraplength=480)
        self.news_label.pack(anchor="w", pady=(5, 0))

    def _create_status_bar(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–∞—Ä."""
        status_frame = tk.Frame(self.root, bg="#1e1e1e")
        status_frame.pack(side="bottom", fill="x", padx=10, pady=5)

        self.status_indicator = tk.Label(status_frame, width=2, bg="orange")
        self.status_indicator.pack(side="left", padx=(0, 5))

        self.status_label = tk.Label(status_frame,
                                     text=self.translations.get_text("connecting"),
                                     fg="#888", bg="#1e1e1e")
        self.status_label.pack(side="left")

    def _create_buttons(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        btn_container = tk.Frame(self.root, bg="#1e1e1e")
        btn_container.pack(side="bottom", pady=8)

        # –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        btn_row1 = tk.Frame(btn_container, bg="#1e1e1e")
        btn_row1.pack(pady=2)

        if HAS_TRAY:
            btn_min = tk.Button(btn_row1, text=self.translations.get_text("btn_minimize"),
                                command=self.hide_to_tray, bg="#333", fg="white",
                                relief="flat", width=14)
            btn_min.pack(side="left", padx=2)

        self.always_on_top_btn = tk.Button(
            btn_row1, text=self.translations.get_text("btn_always_on_top"),
            command=self.toggle_always_on_top,
            bg="#333" if self.config_manager.get("always_on_top") else "#444",
            fg="white", relief="flat", width=14
        )
        self.always_on_top_btn.pack(side="left", padx=2)

        btn_settings = tk.Button(btn_row1, text=self.translations.get_text("btn_settings"),
                                 command=self.open_settings, bg="#333", fg="white",
                                 relief="flat", width=14)
        btn_settings.pack(side="left", padx=2)

        # –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        btn_row2 = tk.Frame(btn_container, bg="#1e1e1e")
        btn_row2.pack(pady=2)

        btn_history = tk.Button(btn_row2, text="–ò—Å—Ç–æ—Ä–∏—è",
                                command=self.show_alert_history,
                                bg="#333", fg="white", relief="flat", width=14)
        btn_history.pack(side="left", padx=2)

        btn_converter = tk.Button(btn_row2, text="–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä",
                                  command=self.open_converter,
                                  bg="#333", fg="white", relief="flat", width=14)
        btn_converter.pack(side="left", padx=2)

        btn_chart = tk.Button(btn_row2, text="–ì—Ä–∞—Ñ–∏–∫",
                              command=self.open_chart,
                              bg="#333", fg="white", relief="flat", width=14)
        btn_chart.pack(side="left", padx=2)

    def _apply_theme(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."""
        self.root.configure(bg="#1e1e1e")

    def _set_icon(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        try:
            from PIL import Image, ImageDraw, ImageTk
            img = Image.new("RGBA", (16, 16), (30, 30, 30, 255))
            draw = ImageDraw.Draw(img)
            draw.rectangle([4, 4, 11, 11], outline=(255, 215, 0), width=1)
            draw.text((5, 2), "C", fill=(255, 215, 0))
            icon = ImageTk.PhotoImage(img)
            self.root.iconphoto(True, icon)
        except Exception as e:
            ErrorHandler.handle_ui_error(e, "icon")

    def _start_services(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã."""
        # –ó–∞–ø—É—Å–∫ WebSocket
        symbol = self.config_manager.get("symbol")
        self.price_provider.start_stream(symbol, self._on_price_update)

        # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
        self.news_thread = threading.Thread(target=self._news_update_loop, daemon=True)
        self.news_thread.start()

        # –ó–∞–ø—É—Å–∫ —Ñ–æ–ª–±—ç–∫–∞ REST
        self.rest_thread = threading.Thread(target=self._rest_fallback_loop, daemon=True)
        self.rest_thread.start()

    def _on_price_event(self, event: str, data: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∞ —Ü–µ–Ω."""
        if event == 'price_update':
            self.root.after(0, self._process_price_update, data)

    def _process_price_update(self, data: Dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ UI –ø–æ—Ç–æ–∫–µ."""
        price = data['price']
        timestamp = data['timestamp']

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        self._update_price_display(price, timestamp)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
        alert_config = AlertConfig(
            threshold_up=self.config_manager.get("alert_threshold_up", 1.0),
            threshold_down=self.config_manager.get("alert_threshold_down", 1.0),
            absolute_up=self.config_manager.get("alert_absolute_up"),
            absolute_down=self.config_manager.get("alert_absolute_down"),
            cooldown_sec=self.config_manager.get("alert_cooldown_sec", 15)
        )

        should_alert, message = self.monitor.check_alert(price, timestamp, alert_config)
        if should_alert:
            self._trigger_alert(message)

    def _trigger_alert(self, message: str):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ."""
        full_message = self.translations.get_text("alert_message", msg=message)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.alert_history.append(f"{time.strftime('%H:%M:%S')} ‚Äî {full_message}")

        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
        if self.config_manager.get("show_sound", True):
            self.notification_service.play_alert()

        # –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if self.config_manager.get("show_notifications", True):
            self.notification_service.show_notification("Crypto Price Alert", full_message)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        self.status_label.config(text=full_message, fg="orange")

    def _update_price_display(self, price: float, timestamp: float):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã."""
        symbol = self.config_manager.get("symbol").lower()
        currency = symbol[-3:].upper()

        # –¶–≤–µ—Ç –∏ —Å—Ç—Ä–µ–ª–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        color = "white"
        arrow = ""
        if self.config_manager.get("color_price", True) and self.monitor.last_price is not None:
            if price > self.monitor.last_price:
                color, arrow = "#00FF00", " ‚ñ≤"
            elif price < self.monitor.last_price:
                color, arrow = "#FF3333", " ‚ñº"

        self.price_label.config(
            text=f"{FormatUtils.format_price(price, currency)}{arrow}",
            fg=color
        )

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
        if currency == "USD":
            eur_price = price * 0.92  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
            rub_price = price * self.converter.get_usdt_rub()
            self.converted_label.config(text=f"‚âà ‚Ç¨{eur_price:,.2f} | ‚ÇΩ{rub_price:,.0f}")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ USDT/RUB
        usdt_rub = self.converter.get_usdt_rub()
        self.usdt_rub_label.config(text=f"USDT/RUB ‚âà ‚ÇΩ{usdt_rub:,.2f}")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        self._update_portfolio_display()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        self.status_indicator.config(bg="#00FF00")
        time_str = time.strftime("%H:%M:%S", time.localtime(timestamp))
        self.status_label.config(
            text=f"{self.translations.get_text('live_updated')} {time_str}",
            fg="#00FF00"
        )

    def _update_portfolio_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è."""
        try:
            asset = self.config_manager.get("portfolio_asset", "BTC")
            amount = self.config_manager.get("portfolio_amount", 0.0)

            if amount <= 0:
                self.portfolio_label.config(text="")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–Ω–∏—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if not hasattr(self, 'monitor') or self.monitor.last_price is None:
                self.portfolio_label.config(text="–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
                return

            btc_price = self.monitor.last_price or 0
            usdt_rub = self.converter.get_usdt_rub()

            display_text = FormatUtils.format_portfolio_value(amount, asset, btc_price, usdt_rub)
            self.portfolio_label.config(text=display_text)

        except Exception as e:
            ErrorHandler.handle_ui_error(e, "portfolio_display")
            self.portfolio_label.config(text="–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞")

    def _update_title(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–æ–π."""
        symbol = self.config_manager.get("symbol").upper()
        if symbol.endswith('USDT'):
            display_symbol = f"{symbol[:-4]}/USDT"
        elif symbol.endswith('EUR'):
            display_symbol = f"{symbol[:-3]}/EUR"
        elif symbol.endswith('RUB'):
            display_symbol = f"{symbol[:-3]}/RUB"
        else:
            display_symbol = symbol

        self.title_label.config(text=display_symbol)

    def _on_price_update(self, price: Optional[float], timestamp: float, **kwargs):
        """Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ü–µ–Ω—ã."""
        if price is not None:
            self.monitor.add_price(price)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if kwargs.get('connected'):
            self.status_label.config(text=self.translations.get_text("connected"), fg="#00FF00")
        elif kwargs.get('disconnected'):
            self.status_label.config(text=self.translations.get_text("disconnected"), fg="orange")
        elif kwargs.get('error'):
            self.status_label.config(text=self.translations.get_text("error"), fg="red")

    def _news_update_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π."""
        while getattr(self, 'monitor', None) and self.monitor.running:
            try:
                language = "ru" if self.config_manager.get("language") == "ru" else "en"
                news = self.news_service.fetch_news(language=language)

                if news:
                    self.news_cache = news
                    self.root.after(0, self._update_news_display)

                time.sleep(300)  # 5 –º–∏–Ω—É—Ç
            except Exception as e:
                ErrorHandler.handle_ui_error(e, "news")
                time.sleep(60)

    def _update_news_display(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π."""
        if hasattr(self, 'news_cache') and self.news_cache:
            news_text = "\n".join(f"‚Ä¢ {item}" for item in self.news_cache[:3])
            self.news_label.config(text=news_text)
        else:
            self.news_label.config(text="–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π")

    def _rest_fallback_loop(self):
        """–¶–∏–∫–ª —Ñ–æ–ª–±—ç–∫–∞ —á–µ—Ä–µ–∑ REST API."""
        while getattr(self, 'monitor', None) and self.monitor.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
                if (not hasattr(self.monitor, 'price_history') or
                        not self.monitor.price_history or
                        time.time() - self.monitor.price_history[-1][0] > 15):

                    symbol = self.config_manager.get("symbol").upper()
                    current_price = self.price_provider.get_current_price(symbol)

                    if current_price:
                        self.monitor.add_price(current_price)
                        self.status_label.config(text="REST fallback", fg="#00AA00")

                time.sleep(10)
            except Exception as e:
                ErrorHandler.handle_ui_error(e, "rest_fallback")
                time.sleep(30)

    def _setup_keybindings(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏."""
        self.root.bind('<Control-q>', lambda e: self.quit_app())
        self.root.bind('<Control-h>', lambda e: self.show_window())
        self.root.bind('<Control-l>', lambda e: self.show_alert_history())

    def _setup_tray(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π."""
        if not HAS_TRAY:
            return

        def create_image():
            image = Image.new('RGB', (16, 16), (30, 30, 30))
            draw = ImageDraw.Draw(image)
            draw.rectangle([4, 4, 11, 11], outline=(255, 215, 0))
            draw.text((5, 2), "C", fill=(255, 215, 0))
            return image

        def show_window(icon, item=None):
            icon.stop()
            self.show_window()

        def quit_app(icon, item=None):
            icon.stop()
            self.quit_app()

        menu = Menu(
            MenuItem(self.translations.get_text("tray_show"), show_window),
            MenuItem(self.translations.get_text("tray_exit"), quit_app)
        )

        self.tray_icon = Icon("Crypto Tracker", icon=create_image(),
                              title="Crypto Tracker", menu=menu)

    # Public methods
    def toggle_always_on_top(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º '–ü–æ–≤–µ—Ä—Ö –≤—Å–µ—Ö –æ–∫–æ–Ω'."""
        new_state = not self.config_manager.get("always_on_top", False)
        self.config_manager.set("always_on_top", new_state)
        self.root.wm_attributes("-topmost", new_state)
        self.always_on_top_btn.config(bg="#333" if new_state else "#444")

    def open_settings(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        SettingsWindow(self.root, self.config_manager.all_config,
                       self._on_config_save, self.translations)

    def open_converter(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞."""
        ConverterWindow(self.root, self.converter, self.monitor, self.translations)

    def open_chart(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –≥—Ä–∞—Ñ–∏–∫–∞."""
        ChartWindow(self.root, self.config_manager.get("symbol"), self.translations)

    def show_alert_history(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ–ø–æ–≤–µ—â–µ–Ω–∏–π."""
        AlertHistoryWindow(self.root, self.alert_history, self.translations)

    def hide_to_tray(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π."""
        if HAS_TRAY:
            self.root.withdraw()
            if not hasattr(self, 'tray_thread') or not self.tray_thread.is_alive():
                self.tray_thread = threading.Thread(target=self.tray_icon.run, daemon=True)
                self.tray_thread.start()

    def show_window(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –∏–∑ —Ç—Ä–µ—è."""
        self.root.deiconify()
        self.root.lift()
        self.root.focus_force()

    def on_close(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞."""
        if HAS_TRAY:
            self.hide_to_tray()
        else:
            self.quit_app()

    def quit_app(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        if hasattr(self, 'monitor'):
            self.monitor.running = False

        if hasattr(self, 'price_provider'):
            self.price_provider.stop_stream()

        if hasattr(self, 'tray_icon'):
            self.tray_icon.stop()

        self.root.quit()
        self.root.destroy()

    def _on_config_save(self, new_config: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        self.config_manager.update(new_config)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if 'language' in new_config:
            self.translations.set_language(new_config['language'])
            self.root.title(self.translations.get_text("title"))

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–∏–º–≤–æ–ª–∞
        if 'symbol' in new_config:
            self._update_title()
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ WebSocket —Å –Ω–æ–≤—ã–º —Å–∏–º–≤–æ–ª–æ–º
            self.price_provider.stop_stream()
            self.price_provider.start_stream(new_config['symbol'], self._on_price_update)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        self._update_portfolio_display()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    root = tk.Tk()
    app = CryptoPriceApp(root)
    root.mainloop()


if __name__ == "__main__":
    main()